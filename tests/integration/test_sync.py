# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import unittest
from datetime import datetime
from typing import Awaitable
from typing import Callable
from uuid import UUID
from uuid import uuid4

import pytest
from fastapi import FastAPI
from fastramqpi.depends import from_user_context
from fastramqpi.pytest_util import retry
from httpx import AsyncClient
from more_itertools import one
from more_itertools import only
from tenacity import stop_after_delay
from zoneinfo import ZoneInfo

from os2mo_fkk.autogenerated_graphql_client import ClassCreateInput
from os2mo_fkk.autogenerated_graphql_client import ClassUpdateInput
from os2mo_fkk.autogenerated_graphql_client import (
    GetClassClassesObjectsValidities as GraphqlClassValidity,
)
from os2mo_fkk.autogenerated_graphql_client import (
    GetClassClassesObjectsValiditiesValidity as GraphqlValidity,
)
from os2mo_fkk.autogenerated_graphql_client import GraphQLClient
from os2mo_fkk.autogenerated_graphql_client import ValidityInput
from os2mo_fkk.events import SyncStatus
from os2mo_fkk.klassifikation.models import Klasse as FKKKlasse

MO_TZ = ZoneInfo("Europe/Copenhagen")

# Kommunens administrative systemer
UUID_85 = UUID("dbb1b318-3c85-11e3-9b6f-0050c2490048")
# Etablering og udvikling af IT-systemer
UUID_85_11 = UUID("b2d1f90f-eaf3-45b8-9340-dc2471d0a06b")
# Administrative systemer
UUID_85_11_06 = UUID("3fb6adba-6d89-4af0-af0b-728b51947a1f")


AssertClass = Callable[[UUID, list[GraphqlClassValidity] | None], Awaitable[None]]


class FakeFKKAPI:
    def __init__(self) -> None:
        self.fakes: dict[UUID, FKKKlasse] = {}

    async def read(self, uuid: UUID) -> FKKKlasse | None:
        return self.fakes.get(uuid)


@pytest.fixture
async def fake_fkk_api(app: FastAPI) -> FakeFKKAPI:
    """Inject fake FKKAPI into the FastAPI app."""
    fake_fkk_api = FakeFKKAPI()
    app.dependency_overrides[from_user_context("fkk_api")] = lambda: fake_fkk_api
    return fake_fkk_api


@pytest.fixture
async def assert_class(
    graphql_client: GraphQLClient,
) -> AssertClass:
    """Assert that the MO Class of the given UUID is as expected."""

    async def _assert_class(
        uuid: UUID,
        expected: list[GraphqlClassValidity] | None,
    ) -> None:
        mo_classes = await graphql_client.get_class(uuid)
        mo_class = only(mo_classes.objects)
        if expected is None:
            assert mo_class is None
            return
        assert mo_class is not None
        test_case = unittest.TestCase()
        test_case.maxDiff = None
        test_case.assertCountEqual(mo_class.validities, expected)

    return _assert_class


@pytest.fixture
async def kle_number_facet(graphql_client: GraphQLClient) -> UUID:
    """Fetch `kle_number` facet UUID from MO."""
    return one((await graphql_client.get_facet("kle_number")).objects).uuid


VerifySynchronised = Callable[[], Awaitable[None]]


@pytest.fixture
async def verify_synchronised(
    assert_class: AssertClass, kle_number_facet: UUID
) -> VerifySynchronised:
    """Verify that three KLEs in a tree are synchronised properly from FKK."""

    @retry(stop=stop_after_delay(120))
    async def _verify_synchronised() -> None:
        await assert_class(
            UUID_85,
            [
                GraphqlClassValidity(
                    validity=GraphqlValidity(
                        from_=datetime(1988, 1, 1, tzinfo=MO_TZ),
                        to=None,
                    ),
                    facet_uuid=kle_number_facet,
                    uuid=UUID_85,
                    user_key="85",
                    name="Kommunens administrative systemer",
                    parent_uuid=None,
                )
            ],
        )
        await assert_class(
            UUID_85_11,
            [
                GraphqlClassValidity(
                    validity=GraphqlValidity(
                        from_=datetime(1988, 1, 1, tzinfo=MO_TZ),
                        to=None,
                    ),
                    facet_uuid=kle_number_facet,
                    uuid=UUID_85_11,
                    user_key="85.11",
                    name="Etablering og udvikling af IT-systemer",
                    parent_uuid=UUID_85,
                )
            ],
        )
        await assert_class(
            UUID_85_11_06,
            [
                GraphqlClassValidity(
                    validity=GraphqlValidity(
                        from_=datetime(2005, 8, 1, tzinfo=MO_TZ),
                        to=None,
                    ),
                    facet_uuid=kle_number_facet,
                    uuid=UUID_85_11_06,
                    user_key="85.11.06",
                    name="Administrative systemer",
                    parent_uuid=UUID_85_11,
                )
            ],
        )

    return _verify_synchronised


@pytest.mark.integration_test
async def test_synchronisation(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    verify_synchronised: VerifySynchronised,
) -> None:
    """Test that classes are synchronised properly and automatically."""
    await verify_synchronised()


@pytest.mark.integration_test
async def test_bad_update_resynchronisation(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    verify_synchronised: VerifySynchronised,
    kle_number_facet: UUID,
) -> None:
    """Test that classes are resynchronised if edited."""
    await verify_synchronised()

    # Rough 'Administrative systemer' up a bit (but keep the facet_uuid)
    await graphql_client.update_class(
        ClassUpdateInput(
            facet_uuid=kle_number_facet,
            validity=ValidityInput(
                from_=datetime(2000, 1, 1),
                to=datetime(2010, 1, 1),
            ),
            uuid=UUID_85_11_06,
            user_key="FOO",
            name="BAR",
            parent_uuid=None,
        )
    )

    await verify_synchronised()


@pytest.mark.integration_test
async def test_unrelated_class_untouched(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    assert_class: AssertClass,
) -> None:
    """Test that classes unrelated to FKK are untouched."""
    engagement_type_facet = one(
        (await graphql_client.get_facet("engagement_type")).objects
    ).uuid

    # Create arbitrary class *not* under the `kle_number` facet
    uuid = uuid4()
    await graphql_client.create_class(
        ClassCreateInput(
            facet_uuid=engagement_type_facet,
            validity=ValidityInput(
                from_=datetime(1980, 1, 1),
                to=None,
            ),
            uuid=uuid,
            user_key="WORKING",
            name="Working Class",
            parent_uuid=None,
        )
    )

    # Bait the integration into modifying or deleting it
    assert (await test_client.post(f"/sync/{uuid}")).json() == SyncStatus.WONT_DELETE

    # Verify that it wasn't fooled by our silliness
    await assert_class(
        uuid,
        [
            GraphqlClassValidity(
                validity=GraphqlValidity(
                    from_=datetime(1980, 1, 1, tzinfo=MO_TZ),
                    to=None,
                ),
                facet_uuid=engagement_type_facet,
                uuid=uuid,
                user_key="WORKING",
                name="Working Class",
                parent_uuid=None,
            )
        ],
    )


@pytest.mark.integration_test
async def test_delete(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    assert_class: AssertClass,
    kle_number_facet: UUID,
) -> None:
    """Test that classes can be deleted."""
    # Create class in MO that definitely isn't in FKK
    uuid = UUID("00000000-0000-0000-0000-000000000000")
    await graphql_client.create_class(
        ClassCreateInput(
            facet_uuid=kle_number_facet,
            validity=ValidityInput(
                from_=datetime(2013, 4, 5),
                to=None,
            ),
            uuid=uuid,
            user_key="FOO",
            name="BAR",
            parent_uuid=None,
        )
    )

    # Verify that it is deleted from MO
    @retry(stop=stop_after_delay(120))
    async def verify() -> None:
        await assert_class(uuid, None)

    await verify()


@pytest.mark.integration_test
async def test_ignore_single_day(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    assert_class: AssertClass,
) -> None:
    """Test that single-day validities are ignored.

    MO does not support objects with a validity less than a day."""
    # This class starts 1988-01-01 and ends 1988-01-02.
    uuid = UUID("339ed74a-b3e5-11e7-bfe9-0050c2490048")

    assert (await test_client.post(f"/sync/{uuid}")).json() == SyncStatus.UP_TO_DATE
    await assert_class(uuid, None)


@pytest.mark.integration_test
async def test_daylight_saving_dates(
    test_client: AsyncClient, graphql_client: GraphQLClient
) -> None:
    """Test that timezones do not cause infinite synchronisation loops.

    Regression test for #61610."""
    # This class ends on 2010-10-31 at 00:00. Daylight saving ends in Denmark
    # 2010-10-31 at 03:00 that year.
    uuid = UUID("339ed74a-b3e5-11e7-81c3-0050c2490048")

    assert (
        await test_client.post(f"/sync/{uuid}")
    ).json() == SyncStatus.CREATE_OR_UPDATE
    assert (await test_client.post(f"/sync/{uuid}")).json() == SyncStatus.UP_TO_DATE


@pytest.mark.integration_test
async def test_frederikshavn_custom_kle(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    fake_fkk_api: FakeFKKAPI,
    assert_class: AssertClass,
    kle_number_facet: UUID,
) -> None:
    """Test that a Klasse that does not start or end at midnight can be synchronised."""
    # The Frederikshavn-specific FKK Klasse is from
    # curl http://localhost:8000/read/4130b463-044e-46da-a922-79a50290c904/parsed
    # on Frederikshavn test 2024-08-16.
    uuid = UUID("4130b463-044e-46da-a922-79a50290c904")
    klasse_json = {
        "uuid": str(uuid),
        "attribut_egenskab": [
            {
                "virkning": {
                    "fra": "2019-08-19T10:44:47.457000+02:00",
                    "til": "9999-12-31T23:59:59.999999+00:00",
                },
                "brugervendtnoegle": "32.18.80",
                "titel": "Kørsel servicelovens §41 familieafdeling (lokal Frh. KLE nr.)",
            }
        ],
        "tilstand_publiceret": [
            {
                "virkning": {
                    "fra": "0001-01-01T00:00:00+00:00",
                    "til": "2019-08-19T00:00:00+02:00",
                },
                "er_publiceret": False,
            },
            {
                "virkning": {
                    "fra": "2019-08-19T00:00:00+02:00",
                    "til": "9999-12-31T23:59:59.999999+00:00",
                },
                "er_publiceret": True,
            },
        ],
        "relation_overordnet": [
            {
                "virkning": {
                    "fra": "2019-08-19T10:44:47.457000+02:00",
                    "til": "9999-12-31T23:59:59.999999+00:00",
                },
                "uuid": "d0534837-f239-4b36-9083-daf0ed58ea87",
            }
        ],
    }
    klasse = FKKKlasse.parse_obj(klasse_json)

    # The Klasse is local to Frederikshavn only; we must patch it into the FKK API.
    fake_fkk_api.fakes[uuid] = klasse
    assert (await test_client.get(f"/read/{uuid}/parsed")).json() == klasse_json

    # Check infinite synchronisation loop
    assert (
        await test_client.post(f"/sync/{uuid}")
    ).json() == SyncStatus.CREATE_OR_UPDATE
    assert (await test_client.post(f"/sync/{uuid}")).json() == SyncStatus.UP_TO_DATE

    await assert_class(
        uuid,
        [
            GraphqlClassValidity(
                validity=GraphqlValidity(
                    from_=datetime(
                        2019, 8, 19, 0, 0, tzinfo=ZoneInfo(key="Europe/Copenhagen")
                    ),
                    to=None,
                ),
                facet_uuid=kle_number_facet,
                uuid=UUID("4130b463-044e-46da-a922-79a50290c904"),
                user_key="32.18.80",
                name="Kørsel servicelovens §41 familieafdeling (lokal Frh. KLE nr.)",
                parent_uuid=UUID("d0534837-f239-4b36-9083-daf0ed58ea87"),
            )
        ],
    )
