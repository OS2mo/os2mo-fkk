# Generated by ariadne-codegen on 2024-08-08 21:31
# Source: queries.graphql

from uuid import UUID

from .async_base_client import AsyncBaseClient
from .create_class import CreateClass
from .create_class import CreateClassClassCreate
from .delete_class import DeleteClass
from .delete_class import DeleteClassClassDelete
from .get_class import GetClass
from .get_class import GetClassClasses
from .get_facet import GetFacet
from .get_facet import GetFacetFacets
from .input_types import ClassCreateInput
from .input_types import ClassUpdateInput
from .truncate_class import TruncateClass
from .truncate_class import TruncateClassClassTerminate
from .update_class import UpdateClass
from .update_class import UpdateClassClassUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def get_facet(self, user_key: str) -> GetFacetFacets:
        query = gql(
            """
            query get_facet($user_key: String!) {
              facets(filter: {user_keys: [$user_key]}) {
                objects {
                  uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"user_key": user_key}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetFacet.parse_obj(data).facets

    async def get_class(self, uuid: UUID) -> GetClassClasses:
        query = gql(
            """
            query get_class($uuid: UUID!) {
              classes(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
                objects {
                  validities(start: null, end: null) {
                    validity {
                      from
                      to
                    }
                    facet_uuid
                    uuid
                    user_key
                    name
                    parent_uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetClass.parse_obj(data).classes

    async def create_class(self, input: ClassCreateInput) -> CreateClassClassCreate:
        query = gql(
            """
            mutation create_class($input: ClassCreateInput!) {
              class_create(input: $input) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateClass.parse_obj(data).class_create

    async def update_class(self, input: ClassUpdateInput) -> UpdateClassClassUpdate:
        query = gql(
            """
            mutation update_class($input: ClassUpdateInput!) {
              class_update(input: $input) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateClass.parse_obj(data).class_update

    async def truncate_class(self, uuid: UUID) -> TruncateClassClassTerminate:
        query = gql(
            """
            mutation truncate_class($uuid: UUID!) {
              class_terminate(input: {uuid: $uuid, from: "0001-01-02", to: "9999-12-30"}) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TruncateClass.parse_obj(data).class_terminate

    async def delete_class(self, uuid: UUID) -> DeleteClassClassDelete:
        query = gql(
            """
            mutation delete_class($uuid: UUID!) {
              class_delete(uuid: $uuid) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return DeleteClass.parse_obj(data).class_delete
